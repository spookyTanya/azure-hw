{
    "name": "dataflow1",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "AzureSynapseAnalyticsTable1_raw",
                        "type": "DatasetReference"
                    },
                    "name": "source1"
                },
                {
                    "dataset": {
                        "referenceName": "AzureSynapseAnalyticsTable1_raw",
                        "type": "DatasetReference"
                    },
                    "name": "source2"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "AzureSynapseAnalyticsTable1_transformed",
                        "type": "DatasetReference"
                    },
                    "name": "sink1",
                    "rejectedDataLinkedService": {
                        "referenceName": "linkedService1",
                        "type": "LinkedServiceReference"
                    }
                }
            ],
            "transformations": [
                {
                    "name": "priceFilter"
                },
                {
                    "name": "latLonFilter"
                },
                {
                    "name": "minLastReview"
                },
                {
                    "name": "Union"
                },
                {
                    "name": "FillMissingValues"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          ID as integer,",
                "          NAME as string,",
                "          HOST_ID as integer,",
                "          HOST_NAME as string,",
                "          NEIGHBOURHOOD_GROUP as string,",
                "          NEIGHBOURHOOD as string,",
                "          LATITUDE as double,",
                "          LONGITUDE as double,",
                "          ROOM_TYPE as string,",
                "          PRICE as double,",
                "          MINIMUM_NIGHTS as integer,",
                "          NUMBER_OF_REVIEWS as integer,",
                "          LAST_REVIEW as date,",
                "          REVIEWS_PER_MONTH as double,",
                "          CALCULATED_HOST_LISTINGS_COUNT as double,",
                "          AVAILABILITY_365 as double",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     isolationLevel: 'READ_UNCOMMITTED',",
                "     format: 'table',",
                "     staged: true) ~> source1",
                "source(output(",
                "          ID as integer,",
                "          NAME as string,",
                "          HOST_ID as integer,",
                "          HOST_NAME as string,",
                "          NEIGHBOURHOOD_GROUP as string,",
                "          NEIGHBOURHOOD as string,",
                "          LATITUDE as double,",
                "          LONGITUDE as double,",
                "          ROOM_TYPE as string,",
                "          PRICE as double,",
                "          MINIMUM_NIGHTS as integer,",
                "          NUMBER_OF_REVIEWS as integer,",
                "          LAST_REVIEW as date,",
                "          REVIEWS_PER_MONTH as double,",
                "          CALCULATED_HOST_LISTINGS_COUNT as double,",
                "          AVAILABILITY_365 as double",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     isolationLevel: 'READ_UNCOMMITTED',",
                "     format: 'table',",
                "     staged: true) ~> source2",
                "source1 filter(PRICE > 0) ~> priceFilter",
                "priceFilter filter(!isNull(LATITUDE) && !isNull(LONGITUDE)) ~> latLonFilter",
                "source2 aggregate(min_last_review = min(LAST_REVIEW)) ~> minLastReview",
                "latLonFilter, minLastReview union(byName: true)~> Union",
                "Union derive(LAST_REVIEW = coalesce(LAST_REVIEW, min_last_review),",
                "          REVIEWS_PER_MONTH = coalesce(REVIEWS_PER_MONTH, 0)) ~> FillMissingValues",
                "FillMissingValues sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          ID as integer,",
                "          NAME as string,",
                "          HOST_ID as integer,",
                "          HOST_NAME as string,",
                "          NEIGHBOURHOOD_GROUP as string,",
                "          NEIGHBOURHOOD as string,",
                "          LATITUDE as double,",
                "          LONGITUDE as double,",
                "          ROOM_TYPE as string,",
                "          PRICE as double,",
                "          MINIMUM_NIGHTS as integer,",
                "          NUMBER_OF_REVIEWS as integer,",
                "          LAST_REVIEW as date,",
                "          REVIEWS_PER_MONTH as double,",
                "          CALCULATED_HOST_LISTINGS_COUNT as double,",
                "          AVAILABILITY_365 as double",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:false,",
                "     format: 'table',",
                "     staged: true,",
                "     allowCopyCommand: true,",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     errorHandlingOption: 'allErrors',",
                "     outputRejectedData: true,",
                "     rejectedData_container: 'errors',",
                "     transactionCommit: 'batch',",
                "     reportSuccessOnError: false) ~> sink1"
            ]
        }
    }
}